{"version":3,"sources":["constants.js","components/Table/index.js","hooks/useWebSockets.js","hooks/useStocksWS.js","config.js","containers/providers/DataProvider.js","containers/Home/index.js","containers/Detail/index.js","App.js","serviceWorker.js","index.js"],"names":["HEADINGS","ticker","price","lastUpdate","PRETTY_NAME","Table","props","THead","TBody","TH","TRow","colorStr","color","style","backgroundColor","TD","useWebSockets","url","useState","data","setValue","useEffect","socket","WebSocket","onmessage","event","JSON","parse","onerror","evt","console","log","e","useStocksWS","process","pricesByKey","setPricesByKey","useLocalStorage","savedMapping","setSavedMapping","previousSocketMessage","setPreviousSocketMessage","pricesByKeyCalc","reduce","acc","name","stockVal","Date","now","savedMappingTemp","forEach","savedForName","length","shift","push","time","DataContext","React","DataProvider","Provider","value","headings","Object","keys","Home","history","useHistory","useContext","className","map","heading","key","onClick","moment","startOf","fromNow","Detail","useParams","labels","setLabels","yPoints","setYPoints","labelsTemp","item","format","yPointsTemp","datasets","label","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","AppRouter","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAAaA,G,MAAW,CACtBC,OAAQ,SACRC,MAAO,QACPC,WAAY,eAGDC,EAAc,CACzBH,OAAQ,SACRC,MAAO,QACPC,WAAY,eCoBRE,EAAQ,SAAAC,GAAK,OACjB,0BAAWA,IAIbD,EAAME,MA7BQ,SAAAD,GAAK,OACjB,0BAAWA,IA6BbD,EAAMG,MAXQ,SAAAF,GAAK,OACjB,0BAAWA,IAWbD,EAAMI,GApBK,SAAAH,GAAK,OACd,uBAAQA,IAoBVD,EAAMK,KA5BO,SAAC,GAAD,IDOWC,ECPRC,EAAH,EAAGA,MAAUN,EAAb,gCACX,sCACEO,MAAO,CAAEC,iBDKWH,ECLeC,EDMpB,QAAbD,EALY,UAOG,UAAbA,EANY,UACN,WCFNL,KA0BRD,EAAMU,GAlBK,SAAAT,GAAK,OACd,uBAAQA,IAmBKD,Q,+BCnBAW,EAnBO,SAAAC,GAAQ,IAAD,EACFC,mBAAS,IADP,mBACpBC,EADoB,KACdC,EADc,KAgB3B,OAbAC,qBAAU,WACR,IACE,IAAMC,EAAS,IAAIC,UAAUN,GAC7BK,EAAOE,UAAY,SAAAC,GACjBL,EAASM,KAAKC,MAAMF,EAAMN,QAE5BG,EAAOM,QAAU,SAAAC,GACfC,QAAQC,IAAIF,IAEd,MAAOG,GACPZ,EAAS,OAEV,CAACH,IACGE,GCyEMc,EArFK,WAClB,IAAMd,EAAOH,ECPckB,4BDMH,EAEchB,mBAAS,IAFvB,mBAEjBiB,EAFiB,KAEJC,EAFI,OAGgBC,YAAgB,iBAAkB,IAHlD,mBAGjBC,EAHiB,KAGHC,EAHG,OAKkCrB,mBAAS,IAL3C,mBAKjBsB,EALiB,KAKMC,EALN,KA+ExB,OAzEApB,qBAAU,WACR,GAAImB,IAA0BrB,GAASA,EAAvC,CAGA,IAAMuB,EAAkBvB,EAAKwB,QAAO,SAACC,EAAD,GAAyB,IAG5B,EAOtB,EAQF,EAlBmD,mBAAjBC,EAAiB,KAAX3C,EAAW,KACtD4C,EAAW,GACXF,EAAIC,GACFD,EAAIC,GAAM3C,MAAQA,GACZ,mBACLF,EAASC,OAAS4C,GADb,cAEL7C,EAASE,MAAQA,GAFZ,cAGLF,EAASG,WAAa4C,KAAKC,OAHtB,sBAIC,OAJTF,EAAQ,IAOA,mBACL9C,EAASC,OAAS4C,GADb,cAEL7C,EAASE,MAAQA,GAFZ,cAGLF,EAASG,WAAa4C,KAAKC,OAHtB,sBAIC,SAJTF,EAAQ,IAQF,mBACL9C,EAASC,OAAS4C,GADb,cAEL7C,EAASE,MAAQA,GAFZ,cAGLF,EAASG,WAAa4C,KAAKC,OAHtB,sBAIC,SAJTF,EAAQ,GAQV,OADAF,EAAIC,GAAQC,EACLF,IA3Be,eA4BhBT,IAGFc,EAAgB,eAAQX,GAC9BnB,EAAK+B,SAAQ,YAAoB,IAAD,mBAAjBL,EAAiB,KAAX3C,EAAW,KACxBiD,EAAeF,EAAiBJ,GAClCM,GAAgBA,EAAajD,OAASiD,EAAajD,MAAMkD,OAAS,IACpED,EAAajD,MAAMmD,QACnBF,EAAajD,MAAMoD,KAAK,CACtBC,KAAMR,KAAKC,MACX9C,WAEOiD,GAAgBA,EAAajD,OAASiD,EAAajD,MAAMkD,OAAS,GAC3ED,EAAajD,MAAMoD,KAAK,CACtBC,KAAMR,KAAKC,MACX9C,UAIF+C,EAAiBJ,GAAQ,CACvB3C,MAAO,CAAC,CACNqD,KAAMR,KAAKC,MACX9C,MAAO,CAACA,SAMhBqC,EAAgBU,GAChBb,EAAeM,GACfD,EAAyBtB,MACxB,CACDA,EACAgB,EACAK,EACAF,EACAC,EACAH,EACAK,IAGK,CACLN,cACAG,iBEpFSkB,EAAcC,gBAAoB,CAC7CtB,YAAa,GACbG,aAAc,KAoBDoB,EAjBM,SAAC,GAAkB,IAAbpD,EAAY,sBAIjC2B,IAFFE,EAFmC,EAEnCA,YACAG,EAHmC,EAGnCA,aAGF,OACE,gBAACkB,EAAYG,SAAb,eACEC,MAAO,CACLzB,cACAG,iBAEEhC,KCXJuD,EAAWC,OAAOC,KAAK/D,GAiDdgE,EA/CF,WACX,IAAMC,EAAUC,cACK/C,EAASgD,qBAAWX,GAAjCrB,YACR,OACE,yBAAKiC,UAAU,aACb,yBAAKA,UAAU,6BACb,kBAAC,EAAD,KACE,kBAAC,EAAM7D,MAAP,KACE,kBAAC,EAAMG,KAAP,KACGmD,EAASQ,KAAI,SAAAC,GAAO,OACnB,kBAAC,EAAM7D,GAAP,KACGL,EAAYkE,SAKrB,kBAAC,EAAM9D,MAAP,KACGsD,OAAOC,KAAK5C,GAAMkD,KAAI,SAAAE,GAAG,OACxB,kBAAC,EAAM7D,KAAP,CACE6D,IAAKA,EACL3D,MAAOO,EAAKoD,GAAK3D,MACjB4D,QAAS,kBAAMP,EAAQX,KAAR,WAAiBiB,MAE/BV,EAASQ,KAAI,SAAAC,GACZ,OAAIA,IAAYtE,EAASG,WAErB,kBAAC,EAAMY,GAAP,KACG0D,IAAOtD,EAAKoD,GAAKD,IAAUI,QAAQ,UAAUC,WAKlD,kBAAC,EAAM5D,GAAP,KACGI,EAAKoD,GAAKD,gB,QCWlBM,G,OAhDA,WAAO,IACZ3E,EAAW4E,cAAX5E,OACAqC,EAAiB6B,qBAAWX,GAA5BlB,aAFW,EAGSpB,mBAAS,IAHlB,mBAGZ4D,EAHY,KAGJC,EAHI,OAIW7D,mBAAS,IAJpB,mBAIZ8D,EAJY,KAIHC,EAJG,KAKnB5D,qBAAU,WACR,IAAM6D,EAAa5C,EAAarC,GAAQC,MAAMmE,KAAI,SAAAc,GAAI,OAAIV,IAAOU,EAAK5B,MAAM6B,OAAO,gBAC7EC,EAAc/C,EAAarC,GAAQC,MAAMmE,KAAI,SAAAc,GAAI,OAAIA,EAAKjF,SAChE6E,EAAUG,GACVD,EAAWI,KACV,CAAC/C,EAAcyC,EAAWE,EAAYhF,IAEzC,IAAMkB,EAAO,CACX2D,SACAQ,SAAU,CACR,CACEC,MAAM,GAAD,OAAKtF,EAAL,YACLuF,MAAM,EACNC,YAAa,GACb3E,gBAAiB,uBACjB4E,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBpF,KAAM6D,KAKZ,OACE,yBAAKZ,UAAU,eACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CAAMjD,KAAMA,QC1CdqF,EAAY,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOA,KAAK,YAAW,kBAAC,EAAD,UAcdC,EARH,kBACV,kBAAC,EAAD,KACE,8BACE,kBAAC,EAAD,SCRcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/F,QAAQ+F,MAAMA,EAAMC,a","file":"static/js/main.87a125b7.chunk.js","sourcesContent":["export const HEADINGS = {\n  ticker: 'ticker',\n  price: 'price',\n  lastUpdate: 'lastUpdate',\n};\n\nexport const PRETTY_NAME = {\n  ticker: 'Ticker',\n  price: 'Price',\n  lastUpdate: 'Last Update',\n};\n\nconst LIGHT_RED = '#FBE9E7';\nconst LIGHT_GREEN = '#E8F5E9';\nconst WHITE = 'white';\n\nexport const getColor = colorStr => {\n  if (colorStr === 'red') {\n    return LIGHT_RED;\n  } if (colorStr === 'green') {\n    return LIGHT_GREEN;\n  }\n  return WHITE;\n};\n","import React from 'react';\nimport './table.css';\nimport { getColor } from '../../constants';\n\n\nconst THead = props => (\n  <thead {...props} />\n);\n\nconst TRow = ({ color, ...props }) => (\n  <tr\n    style={{ backgroundColor: getColor(color) }}\n    {...props}\n  />\n);\n\nconst TH = props => (\n  <th {...props} />\n);\n\nconst TD = props => (\n  <td {...props} />\n);\n\nconst TBody = props => (\n  <tbody {...props} />\n);\n\n\nconst Table = props => (\n  <table {...props} />\n);\n\n\nTable.THead = THead;\nTable.TBody = TBody;\nTable.TH = TH;\nTable.TRow = TRow;\nTable.TD = TD;\n\nexport default Table;\n","import { useEffect, useState } from 'react';\n\nconst useWebSockets = url => {\n  const [data, setValue] = useState([]);\n\n  useEffect(() => {\n    try {\n      const socket = new WebSocket(url);\n      socket.onmessage = event => {\n        setValue(JSON.parse(event.data));\n      };\n      socket.onerror = evt => {\n        console.log(evt);\n      };\n    } catch (e) {\n      setValue([]);\n    }\n  }, [url]);\n  return data;\n};\n\nexport default useWebSockets;\n","import { useEffect, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport useWebSockets from './useWebSockets';\nimport { WEBSOCKET_URL } from '../config';\nimport { HEADINGS } from '../constants';\n\nconst useStocksWS = () => {\n  const data = useWebSockets(WEBSOCKET_URL);\n  const [pricesByKey, setPricesByKey] = useState({});\n  const [savedMapping, setSavedMapping] = useLocalStorage('storredMapping', {});\n\n  const [previousSocketMessage, setPreviousSocketMessage] = useState([]);\n  useEffect(() => {\n    if (previousSocketMessage === data || !data) {\n      return;\n    }\n    const pricesByKeyCalc = data.reduce((acc, [name, price]) => {\n      let stockVal = {};\n      if (acc[name]) {\n        if (acc[name].price > price) {\n          stockVal = {\n            [HEADINGS.ticker]: name,\n            [HEADINGS.price]: price,\n            [HEADINGS.lastUpdate]: Date.now(),\n            color: 'red',\n          };\n        } else {\n          stockVal = {\n            [HEADINGS.ticker]: name,\n            [HEADINGS.price]: price,\n            [HEADINGS.lastUpdate]: Date.now(),\n            color: 'green',\n          };\n        }\n      } else {\n        stockVal = {\n          [HEADINGS.ticker]: name,\n          [HEADINGS.price]: price,\n          [HEADINGS.lastUpdate]: Date.now(),\n          color: 'white',\n        };\n      }\n      acc[name] = stockVal;\n      return acc;\n    }, { ...pricesByKey });\n\n    // saving only 10 values\n    const savedMappingTemp = { ...savedMapping };\n    data.forEach(([name, price]) => {\n      const savedForName = savedMappingTemp[name];\n      if (savedForName && savedForName.price && savedForName.price.length > 10) {\n        savedForName.price.shift();\n        savedForName.price.push({\n          time: Date.now(),\n          price,\n        });\n      } else if (savedForName && savedForName.price && savedForName.price.length < 10) {\n        savedForName.price.push({\n          time: Date.now(),\n          price,\n        });\n      } else {\n        // savedForName = [price];\n        savedMappingTemp[name] = {\n          price: [{\n            time: Date.now(),\n            price: [price],\n          }],\n        };\n      }\n    });\n\n    setSavedMapping(savedMappingTemp);\n    setPricesByKey(pricesByKeyCalc);\n    setPreviousSocketMessage(data);\n  }, [\n    data,\n    pricesByKey,\n    previousSocketMessage,\n    savedMapping,\n    setSavedMapping,\n    setPricesByKey,\n    setPreviousSocketMessage,\n  ]);\n\n  return {\n    pricesByKey,\n    savedMapping,\n  };\n};\n\nexport default useStocksWS;\n","export const WEBSOCKET_URL = process.env.REACT_APP_WEBSOCKET_URL;\n","import * as React from 'react';\nimport useStocksWS from '../../hooks/useStocksWS';\n\nexport const DataContext = React.createContext({\n  pricesByKey: {},\n  savedMapping: [],\n});\n\nconst DataProvider = ({ ...props }) => {\n  const {\n    pricesByKey,\n    savedMapping,\n  } = useStocksWS();\n\n  return (\n    <DataContext.Provider\n      value={{\n        pricesByKey,\n        savedMapping,\n      }}\n      {...props}\n    />\n  );\n};\n\nexport default DataProvider;\n","import React, { useContext } from 'react';\n\nimport './home.css';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport Table from '../../components/Table';\nimport { HEADINGS, PRETTY_NAME } from '../../constants';\nimport { DataContext } from '../providers/DataProvider';\n\nconst headings = Object.keys(HEADINGS);\n\nconst Home = () => {\n  const history = useHistory();\n  const { pricesByKey: data } = useContext(DataContext);\n  return (\n    <div className=\"home-root\">\n      <div className=\"home-responsive-container\">\n        <Table>\n          <Table.THead>\n            <Table.TRow>\n              {headings.map(heading => (\n                <Table.TH>\n                  {PRETTY_NAME[heading]}\n                </Table.TH>\n              ))}\n            </Table.TRow>\n          </Table.THead>\n          <Table.TBody>\n            {Object.keys(data).map(key => (\n              <Table.TRow\n                key={key}\n                color={data[key].color}\n                onClick={() => history.push(`/${key}`)}\n              >\n                {headings.map(heading => {\n                  if (heading === HEADINGS.lastUpdate) {\n                    return (\n                      <Table.TD>\n                        {moment(data[key][heading]).startOf('second').fromNow()}\n                      </Table.TD>\n                    );\n                  }\n                  return (\n                    <Table.TD>\n                      {data[key][heading]}\n                    </Table.TD>\n                  );\n                })}\n              </Table.TRow>\n            ))}\n          </Table.TBody>\n        </Table>\n      </div>\n    </div>\n  );\n};\n\n\nexport default Home;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { Line } from 'react-chartjs-2';\nimport './detail.css';\nimport moment from 'moment';\nimport { DataContext } from '../providers/DataProvider';\n\nconst Detail = () => {\n  const { ticker } = useParams();\n  const { savedMapping } = useContext(DataContext);\n  const [labels, setLabels] = useState([]);\n  const [yPoints, setYPoints] = useState([]);\n  useEffect(() => {\n    const labelsTemp = savedMapping[ticker].price.map(item => moment(item.time).format('h:mm:ss a'));\n    const yPointsTemp = savedMapping[ticker].price.map(item => item.price);\n    setLabels(labelsTemp);\n    setYPoints(yPointsTemp);\n  }, [savedMapping, setLabels, setYPoints, ticker]);\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: `${ticker} dataset`,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: yPoints,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"detail-root\">\n      <div className=\"detail-responsive-container\">\n        <Line data={data} />\n      </div>\n    </div>\n  );\n};\n\nexport default Detail;\n","import React from 'react';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Home from './containers/Home';\nimport DataProvider from './containers/providers/DataProvider';\nimport Detail from './containers/Detail';\n\nconst AppRouter = () => (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\"><Home /></Route>\n      <Route path=\"/:ticker\"><Detail /></Route>\n    </Switch>\n  </Router>\n);\n\n\nconst App = () => (\n  <DataProvider>\n    <main>\n      <AppRouter />\n    </main>\n  </DataProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}